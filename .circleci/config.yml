# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers
      - image: circleci/mysql:5.7
        environment:
          - DB_CONNECTION=mysql
          - DB_HOST=166.62.30.116
          - DB_PORT=3306
          - DB_DATABASE=orderydb
          - DB_USERNAME=ordery_user
          - DB_PASSWORD=Ordery@1234

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - run:
          name: Install PHP extensions
          command: sudo docker-php-ext-install pdo_mysql

      - run:
          name: Install Composer
          command: 'curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer'

      - run:
        name: Display versions
        command: |
          php -v
          composer --version

      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      #- restore_cache:
       #   keys:
        #    - node-v1-{{ checksum "package.json" }}
         #   - node-v1-
      #- run: yarn install
      #- save_cache:
       #   key: node-v1-{{ checksum "package.json" }}
        #  paths:
         #   - node_modules

      # prepare the database
      #- run: touch storage/ordery.sqlite
      #- run: php artisan migrate --database=mysql --force
      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run